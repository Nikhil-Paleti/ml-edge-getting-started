diff --git a/models/yolo.py b/models/yolo.py
index f730a1e..b821542 100644
--- a/models/yolo.py
+++ b/models/yolo.py
@@ -51,11 +51,12 @@ class Detect(nn.Module):
                     self.grid[i] = self._make_grid(nx, ny).to(x[i].device)
 
                 y = x[i].sigmoid()
-                y[..., 0:2] = (y[..., 0:2] * 2. - 0.5 + self.grid[i]) * self.stride[i]  # xy
-                y[..., 2:4] = (y[..., 2:4] * 2) ** 2 * self.anchor_grid[i]  # wh
+                xy = (y[..., 0:2] * 2. - 0.5 + self.grid[i]) * self.stride[i]  # xy
+                wh = (y[..., 2:4] * 2) ** 2 * self.anchor_grid[i]  # wh
+                y  = torch.cat((xy, wh, y[..., 4:]), dim=-1)
                 z.append(y.view(bs, -1, self.no))
 
-        return x if self.training else (torch.cat(z, 1), x)
+        return x if self.training else torch.cat(z, 1)
 
     @staticmethod
     def _make_grid(nx=20, ny=20):
index 0a7ca3b..1a92113 100644
--- a/utils/google_utils.py
+++ b/utils/google_utils.py
@@ -22,7 +22,7 @@ def attempt_download(file, repo='ultralytics/yolov5'):

     if not file.exists():
         try:
-            response = requests.get(f'https://api.github.com/repos/{repo}/releases/latest').json()  # github api
+            response = requests.get(f'https://api.github.com/repos/{repo}/releases/tags/v5.0').json()  # github api
             assets = [x['name'] for x in response['assets']]  # release assets, i.e. ['yolov5s.pt', 'yolov5m.pt', ...]
             tag = response['tag_name']  # i.e. 'v1.0'
         except:  # fallback plan
index d099699..5fdbd99 100644
--- a/test.py
+++ b/test.py
@@ -107,12 +107,12 @@ def test(data,
         with torch.no_grad():
             # Run model
             t = time_synchronized()
-            out, train_out = model(img, augment=augment)  # inference and training outputs
+            out = model(img, augment=augment)  # inference and training outputs
             t0 += time_synchronized() - t

             # Compute loss
-            if compute_loss:
-                loss += compute_loss([x.float() for x in train_out], targets)[1][:3]  # box, obj, cls
+            #if compute_loss:
+            #    loss += compute_loss([x.float() for x in train_out], targets)[1][:3]  # box, obj, cls

             # Run NMS
             targets[:, 2:] *= torch.Tensor([width, height, width, height]).to(device)  # to pixels
